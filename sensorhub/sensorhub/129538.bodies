class ALooper
!!!137986.cpp!!!	signalSensorEvents(inout queue : ASensorEventQueue) : void
    Mutex::Autolock autoLock(mLock);
    mReadyQueues.insert(queue);
    mCondition.signal();
!!!138114.cpp!!!	wake() : void
    Mutex::Autolock autoLock(mLock);
    mAwoken = true;
    mCondition.signal();
!!!138242.cpp!!!	pollOnce(in timeoutMillis : int, inout outFd : int, inout outEvents : int, inout outData : void) : int
    if (outFd) { *outFd = 0; }
    if (outEvents) { *outEvents = 0; }
    if (outData) { *outData = NULL; }

    int64_t waitUntilNs;
    if (timeoutMillis < 0) {
        waitUntilNs = -1;
    } else {
        waitUntilNs =
            systemTime(SYSTEM_TIME_MONOTONIC) + timeoutMillis * 1000000ll;
    }

    Mutex::Autolock autoLock(mLock);
    int64_t nowNs;
    while ((timeoutMillis < 0
                || (nowNs = systemTime(SYSTEM_TIME_MONOTONIC)) < waitUntilNs)
            && mReadyQueues.empty()
            && !mAwoken) {
        if (timeoutMillis < 0) {
            mCondition.wait(mLock);
        } else {
            mCondition.waitRelative(mLock, waitUntilNs - nowNs);
        }
    }

    int result = ALOOPER_POLL_TIMEOUT;

    if (!mReadyQueues.empty()) {
        result = ALOOPER_POLL_CALLBACK;

        for (auto queue : mReadyQueues) {
            queue->dispatchCallback();
        }

        mReadyQueues.clear();
    } else if (mAwoken) {
        result = ALOOPER_POLL_WAKE;
        mAwoken = false;
    }

    LOG(VERBOSE) << "pollOnce returning " << result;

    return result;
!!!138370.cpp!!!	invalidateSensorQueue(inout queue : ASensorEventQueue) : void
    Mutex::Autolock autoLock(mLock);
    mReadyQueues.erase(queue);
