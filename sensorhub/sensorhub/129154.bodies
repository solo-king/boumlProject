class LockfreeBuffer
!!!137474.cpp!!!	LockfreeBuffer(inout buf : void, in size : size_t)
    memset(mData, 0, size);
!!!137602.cpp!!!	~LockfreeBuffer()
    memset(mData, 0, mSize*sizeof(sensors_event_t));
!!!137730.cpp!!!	write(in ev : sensors_event_t, in size : size_t) : void
    if (!mSize) {
        return;
    }

    while(size--) {
        // part before reserved0 field
        memcpy(&mData[mWritePos], ev, offsetof(sensors_event_t, reserved0));
        // part after reserved0 field
        memcpy(reinterpret_cast<char *>(&mData[mWritePos]) + offsetof(sensors_event_t, timestamp),
               reinterpret_cast<const char *>(ev) + offsetof(sensors_event_t, timestamp),
               sizeof(sensors_event_t) - offsetof(sensors_event_t, timestamp));
        // barrier before writing the atomic counter
        std::atomic_thread_fence(std::memory_order_release);
        mData[mWritePos].reserved0 = mCounter++;
        // barrier after writing the atomic counter
        std::atomic_thread_fence(std::memory_order_release);
        ++ev;

        if (++mWritePos >= mSize) {
            mWritePos = 0;
        }
    }
